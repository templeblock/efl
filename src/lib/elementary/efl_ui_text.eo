import elm_general;
import elm_icon;
import elm_entry;

struct Efl.Ui.Text.Anchor_Info
{
   [[EFL UI text anchor information]]
   name: string; [[The name of the anchor, as stated in its href.]]
   button: int; [[The mouse button used to click on it.]]
   x: Evas.Coord; [[Anchor geometry, relative to canvas.]]
   y: Evas.Coord; [[Anchor geometry, relative to canvas.]]
   w: Evas.Coord; [[Anchor geometry, relative to canvas.]]
   h: Evas.Coord; [[Anchor geometry, relative to canvas.]]
}

struct Efl.Ui.Text.Hover_Parent
{
   [[EFL text hover parent]]
   x: Evas.Coord; [[Hover parent X coordinate]]
   y: Evas.Coord; [[Hover parent Y coordinate]]
   w: Evas.Coord; [[Hover parent width]]
   h: Evas.Coord; [[Hover parent height]]
}

struct Efl.Ui.Text.Anchor_Hover_Info
{
   [[EFL text anchor hover information]]
   anchor_info: ptr(const(Efl.Ui.Text.Anchor_Info)); [[The actual anchor info.]]
   hover: Elm.Hover; [[The hover object to use for the popup.]]
   hover_parent: Efl.Ui.Text.Hover_Parent; [[Hover parent widget]]
   hover_left : bool; [[Hint indicating if there's space
                     for content on the left side of
                     the hover. Before calling the
                     callback, the widget will make the
                     necessary calculations to check
                     which sides are fit to be set with
                     content, based on the position the
                     hover is activated and its distance
                     to the edges of its parent object
                   ]]
   hover_right : bool; [[Hint indicating content fits on
                      the right side of the hover.
                      See @.hover_left.
                    ]]
   hover_top : bool; [[Hint indicating content fits on top
                    of the hover. @.hover_left.
                  ]]
   hover_bottom : bool; [[Hint indicating content fits
                                   below the hover. See
                                   @.hover_left.
                                  ]]
}

class Efl.Ui.Text (Elm.Layout, Elm.Interface_Scrollable, Efl.Ui.Clickable,
                 Elm.Interface.Atspi.Text, Elm.Interface.Atspi.Text.Editable, Efl.File,
                 Efl.Ui.Selectable, Efl.Ui.Scrollable, Efl.Ui.Text.Interactive)
{
   [[Efl UI text class]]
   methods {
      @property scrollable {
         set {
            [[Enable or disable scrolling in entry

              Normally the entry is not scrollable unless you enable it with this call.
            ]]
         }
         get {
            [[Get the scrollable state of the entry

              Normally the entry is not scrollable. This gets the scrollable state
              of the entry.
            ]]
         }
         values {
            scroll: bool; [[$true if it is to be scrollable, $false otherwise.]]
         }
      }
      @property context_menu_disabled {
         set {
            [[This disables the entry's contextual (longpress) menu.]]
         }
         get {
            [[This returns whether the entry's contextual (longpress) menu is
              disabled.
            ]]
         }
         values {
            disabled: bool; [[If $true, the menu is disabled.]]
         }
      }
      @property cnp_mode {
         set {
            [[Control pasting of text and images for the widget.

              Normally the entry allows both text and images to be pasted.
              By setting cnp_mode to be #ELM_CNP_MODE_NO_IMAGE, this prevents images from being copy or past.
              By setting cnp_mode to be #ELM_CNP_MODE_PLAINTEXT, this remove all tags in text .

              Note: This only changes the behaviour of text.
            ]]
         }
         get {
            [[Getting elm_entry text paste/drop mode.

              Normally the entry allows both text and images to be pasted.
              This gets the copy & paste mode of the entry.
            ]]
         }
         values {
            cnp_mode: Elm.Cnp_Mode; [[One of #Elm_Cnp_Mode: #ELM_CNP_MODE_MARKUP, #ELM_CNP_MODE_NO_IMAGE, #ELM_CNP_MODE_PLAINTEXT.]]
         }
      }
      @property selection_handler_disabled {
         set {
            [[This disabled the entry's selection handlers.]]
         }
         get {
            [[This returns whether the entry's selection handlers are disabled.]]
            legacy: null;
         }
         values {
            disabled: bool; [[If $true, the selection handlers are disabled.]]
         }
      }
      @property autocapital_type {
         set {
            [[Set the autocapitalization type on the immodule.]]
         }
         get {
            [[Get the autocapitalization type on the immodule.]]
         }
         values {
            autocapital_type: Elm.Autocapital.Type; [[The type of autocapitalization.]]
         }
      }
      @property password {
         set {
            [[Sets the entry to password mode.

              In password mode, entries are implicitly single line and the display of
              any text in them is replaced with asterisks (*).
            ]]
         }
         get {
            [[Get whether the entry is set to password mode.]]
         }
         values {
            password: bool; [[If true, password mode is enabled.]]
         }
      }
      @property prediction_allow {
         set {
            [[Set whether the entry should allow to use the text prediction.]]
         }
         get {
            [[Get whether the entry should allow to use the text prediction.]]
         }
         values {
            prediction: bool; [[Whether the entry should allow to use the text prediction.]]
         }
      }
      @property input_hint {
         set {
            [[Sets the input hint which allows input methods to fine-tune their behavior.]]
         }
         get {
            [[Gets the value of input hint.]]
         }
         values {
            hints: Elm.Input.Hints; [[Input hint.]]
         }
      }
      item_provider_prepend {
         [[This prepends a custom item provider to the list for that entry

           This prepends the given callback.]]
         params {
            @in func: Elm_Entry_Item_Provider_Cb; [[The function called to provide the item object.]]
            @in data: void_ptr @optional; [[The data passed to $func.]]
         }
      }
      selection_copy {
         [[This executes a "copy" action on the selected text in the entry.]]
      }
      item_provider_remove {
         [[This removes a custom item provider to the list for that entry

           This removes the given callback. See @.item_provider_append for
           more information
         ]]
         params {
            @in func: Elm_Entry_Item_Provider_Cb; [[The function called to provide the item object.]]
            @in data: void_ptr @optional; [[The data passed to $func.]]
         }
      }
      context_menu_clear {
         [[This clears and frees the items in a entry's contextual (longpress)
           menu.

           See also @.context_menu_item_add.
         ]]
      }
      selection_paste {
         [[This executes a "paste" action in the entry.]]
      }
      selection_cut {
         [[This executes a "cut" action on the selected text in the entry.]]
      }
      item_provider_append {
         [[This appends a custom item provider to the list for that entry

           This appends the given callback. The list is walked from beginning to end
           with each function called given the item href string in the text. If the
           function returns an object handle other than $null (it should create an
           object to do this), then this object is used to replace that item. If
           not the next provider is called until one provides an item object, or the
           default provider in entry does.

           See also \@ref entry-items.
         ]]
         params {
            @in func: Elm_Entry_Item_Provider_Cb; [[The function called to provide the item object.]]
            @in data: void_ptr @optional; [[The data passed to $func.]]
         }
      }
      context_menu_item_add {
         [[This adds an item to the entry's contextual menu.

           A longpress on an entry will make the contextual menu show up, if this
           hasn't been disabled with @.context_menu_disabled.set.
           By default, this menu provides a few options like enabling selection mode,
           which is useful on embedded devices that need to be explicit about it,
           and when a selection exists it also shows the copy and cut actions.

           With this function, developers can add other options to this menu to
           perform any action they deem necessary.
         ]]
         params {
            @in label: string @optional; [[The item's text label.]]
            @in icon_file: string @optional; [[The item's icon file.]]
            @in icon_type: Elm.Icon.Type; [[The item's icon type.]]
            @in func: Evas_Smart_Cb @optional; [[The callback to execute when the item is clicked.]]
            @in data: const(void_ptr) @optional; [[The data to associate with the item for related functions.]]
         }
      }
      cursor_new {
         [[Creates and returns a new cursor for the text.]]
         return: Efl.Canvas.Text.Cursor; [[Text cursor]]
      }
   }
   implements {
      class.constructor;
      Efl.Object.constructor;
      Efl.Object.destructor;
      Efl.Gfx.visible.set;
      Efl.Gfx.position.set;
      Efl.Gfx.size.set;
      Efl.Canvas.Group.group_member_add;
      Efl.Canvas.Group.group_add;
      Efl.Canvas.Group.group_del;
      Elm.Widget.activate;
      Elm.Widget.focus_direction_manager_is;
      Elm.Widget.theme_apply;
      Elm.Widget.on_focus;
      Elm.Widget.on_focus_region;
      Elm.Widget.disable;
      Elm.Widget.sub_object_del;
      Elm.Widget.focus_next_manager_is;
      Elm.Layout.theme_enable;
      Elm.Layout.sizing_eval;
      Elm.Layout.text.get;
      Elm.Layout.signal_callback_add;
      Elm.Layout.signal_callback_del;
      Elm.Layout.signal_emit;
      Elm.Layout.text.set;
      Elm.Layout.content_aliases.get;
      Elm.Interface_Scrollable.policy.set;
      Elm.Interface_Scrollable.bounce_allow.set;
      Efl.File.file.set;
      Efl.File.file.get;
      Efl.Ui.Text.Interactive.editable.set;
   }
   events {
      activated; [[Called when entry got activated]]
      changed; [[Called when entry changed]]
      changed,user; [[Called when object changed due to user interaction]]
      validate; [[Called when validating]]
      context,open; [[Called when context menu was opened]]
      anchor,clicked; [[Called when anchor was clicked]]
      rejected; [[Called when entry was rejected]]
      maxlength,reached; [[Called when maximum entry length has been reached]]
      preedit,changed; [[Called when entry preedit changed]]
      press; [[Called when entry pressed]]
      redo,request; [[Called when redo was requested]]
      undo,request; [[Called when undo was requested]]
      text,set,done; [[Called when text set finished]]
      aborted; [[Called when entry was aborted]]
      anchor,down; [[Called on anchor down]]
      anchor,hover,opened; [[Called when hover opened]]
      anchor,in; [[Called on anchor in]]
      anchor,out; [[Called on anchor out]]
      anchor,up; [[called on anchor up]]
      cursor,changed; [[Called on cursor changed]]
      cursor,changed,manual; [[Called on manual cursor change]]
   }
}
