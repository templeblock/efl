import edje_types;

class Edje.Object (Efl.Canvas.Group.Clipped, Efl.File, Efl.Container, Efl.Part,
                   Efl.Observer)
{
   [[Edje object class]]
   legacy_prefix: edje_object;
   eo_prefix: edje_obj;
   event_prefix: edje_object;
   data: Edje;
   methods {
      @property update_hints {
         set {
            [[Edje will automatically update the size hints on itself.

              By default edje doesn't set size hints on itself. With this function
              call, it will do so if update is $true. Be carefully, it cost a lot to
              trigger this feature as it will recalc the object every time it make
              sense to be sure that's its minimal size hint is always accurate.]]
         }
         get {
            [[Whether or not Edje will update size hints on itself.]]
         }
         values {
            update: bool; [[Whether or not update the size hints.]]
         }
      }
      @property mirrored {
         set {
            [[Sets the RTL orientation for this object.

              @since 1.1.0]]
         }
         get {
            [[Gets the RTL orientation for this object.

              You can RTL orientation explicitly with edje_object_mirrored_set.

              @since 1.1.0]]
         }
         values {
            rtl: bool; [[New value of flag $true/$false]]
         }
      }
      @property language {
         set {
            [[Sets the language for this object.

              @since 1.1.0]]
         }
         get {
            [[Gets the language for this object.

              @since 1.1.0]]
         }
         values {
            language: string; [[The language value]]
          }
      }
      @property animation {
         set {
            [[Sets the object's animation state.

              This function starts or stops an Edje object's animation. The
              information if it's stopped can be retrieved by
              edje_object_animation_get().

              See also @.animation.get()]]
         }
         get {
            [[Gets the Edje object's animation state.

              This function returns if the animation is stopped or not. The
              animation state is set by edje_object_animation_set().

              See also @.animation.set().]]
         }
         values {
            on: bool; [[The animation state. $true to starts or
                        $false to stops.]]
         }
      }
      @property play {
         set {
            [[Sets the Edje object to playing or paused states.

              This function sets the Edje object  obj to playing or paused
              states, depending on the parameter  play. This has no effect if
              the object was already at that state.

              See also @.play.get().]]
         }
         get {
            [[Gets the Edje object's state.

              This function tells if an Edje object is playing or not. This state
              is set by edje_object_play_set().

              See also @.play.set().]]
         }
         values {
            play: bool; [[Object state ($true to playing,
                          $false to paused).]]
         }
      }
      @property perspective {
         set {
            [[Sets the given perspective object on this Edje object.

              Make the given perspective object be the default perspective for this Edje
              object.

              There can be only one perspective object per Edje object, and if a
              previous one was set, it will be removed and the new perspective object
              will be used.

              An Edje perspective will only affect a part if it doesn't point to another
              part to be used as perspective.

              \@ref edje_object_perspective_new()
              See also @.perspective.get()
              \@ref edje_perspective_set()]]
            values {
                ps: ptr(Edje.Perspective); [[The perspective object that will be used.]]
            }
         }
         get {
            [[Gets the current perspective used on this Edje object.

              See also @.perspective.set()]]
            values {
                ps: ptr(const(Edje.Perspective)); [[The perspective object that will be used.]]
            }
         }
      }
      @property transition_duration_factor {
         set {
              [[Sets transition duration factor.

                This define the transition duration factor on this
                specific object. By default all animation are run at a speed
                factor of 1.0.]]
         }
         get {
              [[Gets transition duration factor.

                This define the transition duration factor on this
                specific object. By default all animation are run at a speed
                factor of 1.0.]]
         }
         values {
            scale: double; [[The transition duration factor]]
         }
      }
      @property scale {
         set {
            [[Sets the scaling factor for a given Edje object.

              This function sets an  individual scaling factor on the  obj
              Edje object. This property (or Edje's global scaling factor, when
              applicable), will affect this object's part sizes. If scale is
              not zero, than the individual scaling will  override any global
              scaling set, for the object obj's parts. Put it back to zero to
              get the effects of the global scaling again.

              Warning: Only parts which, at EDC level, had the @"scale"
              property set to @1, will be affected by this function. Check the
              complete \@ref edcref "syntax reference" for EDC files.

              See also @.scale.get()
              \@ref edje_scale_get() for more details]]
            return: bool; [[$true on success, $false otherwise]]
         }
         get {
            [[Gets a given Edje object's scaling factor.

              This function returns the individual scaling factor set on the
               obj Edje object.

              See also @.scale.set() for more details]]
         }
         values {
            scale: double; [[The scaling factor (the default value is @0.0,
                             meaning individual scaling  not set)]]
         }
      }
      @property base_scale {
         get {
            [[Gets a given Edje object's base_scale factor.

              This function returns the base_scale factor set on the
               obj Edje object.
              The base_scale can be set in the collection of edc.
              If it isn't set, the default value is 1.0]]
         }
         values {
            base_scale: double(1.0); [[The base_scale factor (the default value is @ 1.0,
                                  that means the edc file is made based on scale 1.0.]]
         }
      }
      @property size_min {
         get {
            [[Gets the minimum size specified -- as an EDC property -- for a
              given Edje object

              This function retrieves the obj object's minimum size values,
              as declared in its EDC group definition.

              Note: If the $min EDC property was not declared for obj, this
              call will return the value 0, for each axis.

              Note: On failure, this function will make all non-$null size
              pointers' pointed variables be set to zero.

              See also @.size_max.get()]]
              /* FIXME-doc
               * Minimum size of groups have the following syntax
               * @code
               * collections
               *   {
               *      group
               *        {
               *           name: "a_group";
               *           min: 100 100;
               *        }
               *   }
               * @endcode
               * where one declares a minimum size of 100 pixels both for width and
               * height. Those are (hint) values which should be respected when the
               * given object/group is to be controlled by a given container object
               * (e.g. an Edje object being "swallowed" into a given $SWALLOW
               * typed part, as in edje_object_part_swallow()). Check the complete
               * \@ref edcref "syntax reference" for EDC files.
               */
         }
         values {
            minw: Evas.Coord; [[Pointer to a variable where to store the minimum width]]
            minh: Evas.Coord; [[Pointer to a variable where to store the minimum height]]
         }
      }
      @property size_max {
         get {
            [[Gets the maximum size specified -- as an EDC property -- for a
              given Edje object

              This function retrieves the obj object's maximum size values,
              as declared in its EDC group definition.

              Note: If the $max EDC property was not declared for obj, this
              call will return the maximum size a given Edje object may have, for
              each axis.

              Note: On failure, this function will make all non-$null size
              pointers' pointed variables be set to zero.

              See also @.size_min.get()]]
              /* FIXME-doc
               * Maximum size of groups have the following syntax
               * @code
               * collections
               *   {
               *      group
               *        {
               *           name: "a_group";
               *           max: 100 100;
               *        }
               *   }
               * @endcode
               * where one declares a maximum size of 100 pixels both for width and
               * height. Those are (hint) values which should be respected when the
               * given object/group is to be controlled by a given container object
               * (e.g. an Edje object being "swallowed" into a given $SWALLOW
               * typed part, as in edje_object_part_swallow()). Check the complete
               * \@ref edcref "syntax reference" for EDC files.
               */
         }
         values {
            maxw: Evas.Coord; [[Pointer to a variable where to store the maximum width]]
            maxh: Evas.Coord; [[Pointer to a variable where to store the maximum height]]
         }
      }
      preload {
         [[Preloads the images on the Edje Object in the background.

           This function requests the preload of all data images (on the given
           object) in the background. The work is queued before being processed
           (because there might be other pending requests of this type).
           It emits a signal "preload,done" when finished.

           Note: Use $true on scenarios where you don't need
           the image data preloaded anymore.]]

         return: bool; [[$false if obj was not a valid Edje object
                         otherwise $true]]
         params {
            @in cancel: bool; [[$false will add it the preloading work queue,
                                $true will remove it (if it was issued before).]]
         }
      }
      @property load_error {
         get {
            [[Gets the (last) file loading error for a given Edje object

              This function is meant to be used after an Edje EDJ file
              loading, what takes place with the edje_object_file_set()
              function. If that function does not return $true, one should
              check for the reason of failure with this one.

              \@ref edje_load_error_str()]]
            return: Edje.Load_Error; [[The Edje loading error, one of:
                                       - #EDJE_LOAD_ERROR_NONE
                                       - #EDJE_LOAD_ERROR_GENERIC
                                       - #EDJE_LOAD_ERROR_DOES_NOT_EXIST
                                       - #EDJE_LOAD_ERROR_PERMISSION_DENIED
                                       - #EDJE_LOAD_ERROR_RESOURCE_ALLOCATION_FAILED
                                       - #EDJE_LOAD_ERROR_CORRUPT_FILE
                                       - #EDJE_LOAD_ERROR_UNKNOWN_FORMAT
                                       - #EDJE_LOAD_ERROR_INCOMPATIBLE_FILE
                                       - #EDJE_LOAD_ERROR_UNKNOWN_COLLECTION
                                       - #EDJE_LOAD_ERROR_RECURSIVE_REFERENCE]]

         }
      }
      size_min_calc {
         [[Calculates the minimum required size for a given Edje object.

           This call works exactly as edje_object_size_min_restricted_calc(),
           with the last two arguments set to 0. Please refer to its
           documentation, then.]]

         params {
            @out minw: Evas.Coord; [[Pointer to a variable where to store the minimum
                                     required width]]
            @out minh: Evas.Coord; [[Pointer to a variable where to store the minimum
                                     required height]]
         }
      }
      size_min_restricted_calc {
         [[Calculates the minimum required size for a given Edje object.

           This call will trigger an internal recalculation of all parts of
           the obj object, in order to return its minimum required
           dimensions for width and height. The user might choose to  impose
           those minimum sizes, making the resulting calculation to get to values
           equal or bigger than restrictedw and restrictedh, for width and
           height, respectively.

           Note: At the end of this call, obj  won't be automatically
           resized to new dimensions, but just return the calculated
           sizes. The caller is the one up to change its geometry or not.

           Warning: Be advised that invisible parts in obj  will be taken
           into account in this calculation.]]

         params {
            @out minw: Evas.Coord; [[Pointer to a variable where to store the minimum
                                     required width]]
            @out minh: Evas.Coord; [[Pointer to a variable where to store the minimum
                                     required height]]
            @in restrictedw: Evas.Coord; [[Do not allow object's calculated (minimum) width
                                           to be less than this value]]
            @in restrictedh: Evas.Coord; [[Do not allow object's calculated (minimum)
                                           height to be less than this value]]
         }
      }
      parts_extends_calc {
         [[Calculates the geometry of the region, relative to a given Edje
           object's area, occupied by all parts in the object.

           This function gets the geometry of the rectangle equal to the area
           required to group all parts in obj's group/collection. The x
           and y coordinates are relative to the top left corner of the
           whole obj object's area. Parts placed out of the group's
           boundaries will also be taken in account, so that x and y
           may be negative.

           Note: Use $null pointers on the geometry components you're not
           interested in: they'll be ignored by the function.

           Note: On failure, this function will make all non-$null geometry
           pointers' pointed variables be set to zero.]]

         return: bool; [[$true on success, $false otherwise]]
         params {
            @out x: Evas.Coord; [[A pointer to a variable where to store the parts region's
                                  x coordinate]]
            @out y: Evas.Coord; [[A pointer to a variable where to store the parts region's
                                  y coordinate]]
            @out w: Evas.Coord; [[A pointer to a variable where to store the parts region's
                                  width]]
            @out h: Evas.Coord; [[A pointer to a variable where to store the parts region's
                                  height]]
         }
      }
      calc_force {
         [[Forces a Size/Geometry calculation.

           Forces the object obj to recalculation layout regardless of
           freeze/thaw.]]

      }
      freeze {
         [[Freezes the Edje object.

           This function puts all changes on hold. Successive freezes will
           nest, requiring an equal number of thaws.

           See also @.thaw()]]

         return: int; [[The frozen state or 0 on Error]]
      }
      thaw {
         [[Thaws the Edje object.

           This function thaws the given Edje object.

           Note:: If sucessives freezes were done, an equal number of
           thaws will be required.

           See also @.freeze()]]

         return: int; [[The frozen state or $0 if the object is not frozen or on error.]]
      }
      @property data {
         get {
            [[Retrives an EDC data field's value from a given Edje object's group.

              This function fetches an EDC data field's value, which is declared
              on the objects building EDC file, under its group. EDC data blocks
              are most commonly used to pass arbitrary parameters from an
              application's theme to its code.

              EDC data fields always hold  strings as values, hence the return
              type of this function. Check the complete \@ref edcref "syntax reference"
              for EDC files.

              Warning: Do not confuse this call with edje_file_data_get(), which
              queries for a  global EDC data field on an EDC declaration file.

              \@ref edje_object_file_set()]]
              /* FIXME-doc
               * They look like the following:
               * @code
               * collections
               *   {
               *      group
               *        {
               *           name: "a_group";
               *           data
               *             {
               *                item: "key1" "value1";
               *                item: "key2" "value2";
               *             }
               *        }
               *  }
               * @endcode
               */
            return: string; [[The data's value string. Must not be freed.]]
         }
         keys {
            key: string; [[The data field's key string]]
         }
      }
      @property message_handler {
         set {
            [[Sets an Edje message handler function for a given Edje object.

              For scriptable programs on an Edje object's defining EDC file which
              send messages with the send_message() primitive, one can attach
              handler functions, to be called in the code which creates
              that object (see \@ref edcref "the syntax" for EDC files).

              This function associates a message handler function and the
              attached data pointer to the object obj.

              See also @.message_send()]]
         }
         values {
            func: Edje.Message_Handler_Cb; [[The function to handle messages  coming from obj]]
            data: void_ptr; [[Auxiliary data to be passed to func]]
         }
      }
      message_send {
         [[Sends an (Edje) message to a given Edje object

           This function sends an Edje message to obj and to all of its
           child objects, if it has any (swallowed objects are one kind of
           child object). type and msg  must be matched accordingly,
           as documented in #Edje_Message_Type.

           The id argument as a form of code and theme defining a common
           interface on message communication. One should define the same IDs
           on both code and EDC declaration (see \@ref edcref "the syntax" for
           EDC files), to individualize messages (binding them to a given
           context).

           The function to handle messages arriving  from obj is set with
           edje_object_message_handler_set().]]

         params {
            @in type: Edje.Message_Type; [[The type of message to send to obj]]
            @in id: int; [[A identification number for the message to be sent]]
            @in msg: void_ptr; [[The message's body, a struct depending on type]]
         }
      }
      signal_callback_add {
         [[Adds a callback for an arriving Edje signal, emitted by
           a given Edje object.

           Edje signals are one of the communication interfaces between
            code and a given Edje object's theme. With signals, one can
           communicate two string values at a time, which are:
           - "emission" value: the name of the signal, in general
           - "source" value: a name for the signal's context, in general

           Though there are those common uses for the two strings, one is free
           to use them however they like.

           Signal callback registration is powerful, in the way that  blobs
           may be used to match multiple signals at once. All the
           "*?[\" set of $fnmatch() operators can be used, both for
           emission and source.

           Edje has  internal signals it will emit, automatically, on
           various actions taking place on group parts. For example, the mouse
           cursor being moved, pressed, released, etc., over a given part's
           area, all generate individual signals.

           By using something like
           edje_object_signal_callback_add(obj, "mouse,down,*", "button.*",
           signal_cb, NULL);
           being \@ref "button.*" the pattern for the names of parts implementing
           buttons on an interface, you'd be registering for notifications on
           events of mouse buttons being pressed down on either of those parts
           (those events all have the @"mouse,down," common prefix on their
           names, with a suffix giving the button number). The actual emission
           and source strings of an event will be passed in as the  emission
           and  source parameters of the callback function (e.g.
           "mouse,down,2" and @"button.close"), for each of those events.

           Note: See \@ref edcref "the syntax" for EDC files
           See also @.signal_emit() on how to emits Edje signals from
           code to a an object
           \@ref edje_object_signal_callback_del_full()]]
           /* FIXME-doc
            * This function adds a callback function to a signal emitted by  obj, to
            * be issued every time an EDC program like the following
            * @code
            * program
            *   {
            *      name: "emit_example";
            *      action: SIGNAL_EMIT "a_signal" "a_source";
            *   }
            * @endcode
            * is run, if emission and source are given those same values,
            * here.
            */

         params {
            @in emission: string; [[The signal's "emission" string]]
            @in source: string; [[The signal's "source" string]]
            @in func: Edje.Signal_Cb; [[The callback function to be executed when the signal is
                                        emitted.]]
            @in data: void_ptr; [[A pointer to data to pass in to func.]]
         }
      }
      signal_callback_del {
         [[Removes a signal-triggered callback from an object.

           This function removes a callback, previously attached to the
           emission of a signal, from the object  obj. The parameters
           emission,  source and  func must match exactly those passed to
           a previous call to edje_object_signal_callback_add(). The data
           pointer that was passed to this call will be returned.

           See also @.signal_callback_add().
           \@ref edje_object_signal_callback_del_full().]]

         legacy: null;
         return: void_ptr; [[The data pointer]]
         params {
            @in emission: string; [[The emission string.]]
            @in source: string; [[The source string.]]
            @in func: Edje.Signal_Cb; [[The callback function.]]
            @in data: void_ptr; [[The callback function.]]
         }
      }
      signal_emit {
         [[Sends/emits an Edje signal to a given Edje object

           This function sends a signal to the object  obj. An Edje program,
           at obj's EDC specification level, can respond to a signal by
           having declared matching @'signal' and @'source' fields on its
           block (see \@ref edcref "the syntax" for EDC files).

           See also @.signal_callback_add() for more on Edje signals.]]
           /* FIXME-doc
            * @code
            * program
            *   {
            *      name: "a_program";
            *      signal: "a_signal";
            *      source: "";
            *      action: ...
            *   }
            * @endcode
            */
         params {
            @in emission: string; [[The signal's "emission" string]]
            @in source: string; [[The signal's "source" string]]
         }
      }
      message_signal_process {
         [[Processes an object's message queue.

           This function goes through the object message queue processing the
           pending messages for  this specific Edje object. Normally they'd
           be processed only at idle time.]]

      }
      @property global_color_class @class {
         set {
            [[Sets Edje color class.

              This function sets the color values for a process level color
              class.  This will cause all edje parts in the current process that
              have the specified color class to have their colors multiplied by
              these values.  (Object level color classes set by
              edje_object_color_class_set() will override the values set by this
              function).

              Setting color emits a signal "color_class,set" with source being
              the given color class in all objects.

              Note: unlike Evas, Edje colors are not pre-multiplied. That is,
              half-transparent white is 255 255 255 128.]]
            legacy: null;
            return: bool; [[$true on success, $false otherwise]]
         }
         get {
            [[Gets Edje color class.

              This function gets the color values for a process level color
              class. This value is the globally set and not per-object, that is,
              the value that would be used by objects if they did not override with
              @.color_class.set().

              See also, @.global_color_class.set()

              Note: unlike Evas, Edje colors are not pre-multiplied. That is,
              half-transparent white is 255 255 255 128.]]
            legacy: null;
            return: bool; [[$true if found or $false if not found and all values
                            are zeored.]]
         }
         keys {
            color_class: string; [[The name of color class]]
            mode: Edje.Color_Class.Mode; [[Edje color class mode]]
         }
         values {
            r: int; [[Object Red value]]
            g: int; [[Object Green value]]
            b: int; [[Object Blue value]]
            a: int; [[Object Alpha value]]
         }
      }
      @property color_class {
         set {
            [[Sets the object color class.

              This function sets the color values for an object level color
              class. This will cause all edje parts in the specified object that
              have the specified color class to have their colors multiplied by
              these values.

              The first color is the object, the second is the text outline, and
              the third is the text shadow. (Note that the second two only apply
              to text parts).

              Setting color emits a signal "color_class,set" with source being
              the given color.

              Note: unlike Evas, Edje colors are not pre-multiplied. That is,
              half-transparent white is 255 255 255 128.]]
            legacy: null;
            return: bool; [[$true on success, $false otherwise]]
         }
         get {
            [[Gets the object color class.

              This function gets the color values for an object level color
              class. If no explicit object color is set, then global values will
              be used.

              The first color is the object, the second is the text outline, and
              the third is the text shadow. (Note that the second two only apply
              to text parts).

              Note: unlike Evas, Edje colors are not pre-multiplied. That is,
              half-transparent white is 255 255 255 128.]]
            legacy: null;
            return: bool; [[$true if found or $false if not found and all
                            values are zeroed.]]
         }
         keys {
            color_class: string; [[The name of color class]]
            mode: Edje.Color_Class.Mode; [[Edje color class mode]]
         }
         values {
            r: int; [[Object Red value]]
            g: int; [[Object Green value]]
            b: int; [[Object Blue value]]
            a: int; [[Object Alpha value]]
         }
      }
      @property color_class_description {
         get {
            [[Gets the description of an object color class.

              This function gets the description of a color class in use by an object.]]
            return: string; [[The description of the target color class or $null if not found]]
         }
         keys {
            color_class: string; [[Color class description]]
         }
      }
      color_class_clear @const {
         [[Clears object color classes.

           @since 1.17.0]]
         return: bool; [[$true on success, or $false on error]]
      }
      color_class_del {
         [[Deletes the object color class.

           This function deletes any values at the object level for the
           specified object and color class.

           Deleting the color class will revert it to the values
           defined by edje_color_class_set() or the color class
           defined in the theme file.

           Deleting the color class will emit the signal "color_class,del"
           for the given Edje object.]]
         params {
            @in color_class: string; [[The color class to be deleted.]]
         }
      }
      @property text_class {
         set {
            [[Sets Edje text class.

              This function sets the text class for the Edje.]]
            return: bool; [[$true on success, or $false on error]]
         }
         get {
            [[Gets font and font size from edje text class.

              This function gets the font and the font size from the object
              text class. The font string will only be valid until the text
              class is changed or the edje object is deleted.]]
            return: bool; [[$true on success, or $false on error]]
         }
         keys {
            text_class: string; [[The text class name]]
         }
         values {
            font: string; [[Font name]]
            size: Evas.Font.Size; [[Font Size]]
         }
      }
      text_class_del {
         [[Deletes the object text class.

           This function deletes any values at the object level for the
           specified object and text class.

           Deleting the text class will revert it to the values
           defined by edje_text_class_set() or the text class
           defined in the theme file.

           @since 1.17]]
         params {
            @in text_class: string; [[The color class to be deleted.]]
         }
      }
      @property size_class {
         set {
            [[Sets the object size class.

              This function sets the min and max values for an object level size
              class. This will make all edje parts in the specified object that
              have the specified size class update their min and max size with given values.

              @since 1.17]]
            return: bool; [[$true on success, or $false on error]]
         }
         get {
            [[Gets the object size class.

              This function gets the min and max values for an object level size
              class. These values will only be valid until the size class is changed
              or the edje object is deleted.

              @since 1.17]]
            return: bool; [[$true on success, or $false on error]]
         }
         keys {
            size_class: string; [[The size class name]]
         }
         values {
            minw: int; [[The min width]]
            minh: int; [[The min height]]
            maxw: int; [[The max width]]
            maxh: int; [[The max height]]
         }
      }
      size_class_del {
         [[Deletes the object size class.

           This function deletes any values at the object level for the
           specified object and size class.

           Deleting the size class will revert it to the values
           defined by edje_size_class_set() or the color class
           defined in the theme file.

           @since 1.17]]
         params {
            @in size_class: string; [[Size class name]]
         }
      }
      access_part_iterate {
         [[Iterates over all accessibility-enabled part names.]]
         legacy: null;
         return: free(own(iterator<string>), eina_iterator_free); [[Part name iterator]]
      }
      part_exists @const {
         [[Checks if an Edje part exists in a given Edje object's group
           definition.

           This function returns if a given part exists in the Edje group
           bound to object obj (with edje_object_file_set()).

           This call is useful, for example, when one could expect or not a
           given GUI element, depending on the  theme applied to obj.]]
         return: bool; [[$true if the Edje part exists in obj's group, or
                         $false otherwise (and on errors)]]
         params {
            @in part: string; [[The part's name to check for existence in obj's
                                      group]]
         }
      }
      @property part_object {
         get {
            [[Gets a handle to the Evas object implementing a given Edje
              part, in an Edje object.

              This function gets a pointer of the Evas object corresponding to a
              given part in the obj object's group.

              You should  never modify the state of the returned object (with
              \@ref evas_object_move() or \@ref evas_object_hide() for example),
              because it's meant to be managed by Edje, solely. You are safe to
              query information about its current state (with
              evas_object_visible_get() or \@ref evas_object_color_get() for
              example), though.

              Note: If the type of Edje part is GROUP, SWALLOW or EXTERNAL,
              returned handle by this function will indicate nothing or transparent
              rectangle for events. Use $.part_swallow_get() in that case.]]
            return: const(Efl.Canvas.Object); [[A pointer to the Evas object implementing the given part,
                                                $null on failure (e.g. the given part doesn't exist)]]
         }
         keys {
            part: string; [[The Edje part's name]]
         }
      }
      @property part_state {
         get {
            [[Returns the state of the Edje part.]]
            return: string; [[The part state:
                                   "default" for the default state
                                    "" for other states]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            val_ret: double; [[Part state value]]
         }
      }
      @property part_geometry {
         get {
            [[Retrieves the geometry of a given Edje part, in a given Edje
              object's group definition, relative to the object's area.

              This function gets the geometry of an Edje part within its
              group. The x and y coordinates are relative to the top left
              corner of the whole obj object's area.

              Note: Use $null pointers on the geometry components you're not
              interested in: they'll be ignored by the function.

              Note: On failure, this function will make all non-$null geometry
              pointers' pointed variables be set to zero.]]
            return: bool; [[$true on success, $false otherwise]]
         }
         keys {
            part: string; [[The Edje part's name]]
         }
         values {
            x: Evas.Coord; [[A pointer to a variable where to store the part's x
                             coordinate]]
            y: Evas.Coord; [[A pointer to a variable where to store the part's y
                             coordinate]]
            w: Evas.Coord; [[A pointer to a variable where to store the part's width]]
            h: Evas.Coord; [[A pointer to a variable where to store the part's height]]
         }
      }
      @property part_drag_value {
         set {
            [[Sets the dragable object location.

              Places the dragable object at the given location.

              Values for dx and dy are real numbers that range from 0 to 1,
              representing the relative position to the dragable area on that axis.

              This value means, for the vertical axis, that 0.0 will be at the top if the
              first parameter of $y in the dragable part theme is 1, and at bottom if it
              is -1.

              For the horizontal axis, 0.0 means left if the first parameter of $x in the
              dragable part theme is 1, and right if it is -1.

              See also @.part_drag_value.get()]]
            return: bool; [[$true on success, $false otherwise]]
         }
         get {
            [[Gets the dragable object location.

              Values for dx and dy are real numbers that range from 0 to 1,
              representing the relative position to the dragable area on that axis.

              See also @.part_drag_value.set()

              Gets the drag location values.]]
            return: bool; [[$true on success, $false otherwise]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            dx: double; [[The x value]]
            dy: double; [[The y value]]
         }
      }
      @property part_drag_size {
         set {
            [[Sets the dragable object size.

              Values for dw and dh are real numbers that range from 0 to 1,
              representing the relative size of the dragable area on that axis.

              Sets the size of the dragable object.

              See also @.part_drag_size.get()]]
            return: bool; [[$true on success, $false otherwise]]
         }
         get {
            [[Gets the dragable object size.

              Gets the dragable object size.

              See also @.part_drag_size.set()]]
            return: bool; [[$true on success, $false otherwise]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            dw: double; [[The drag width]]
            dh: double; [[The drag height]]
         }
      }
      @property part_drag_dir {
         get {
            [[Determines dragable directions.

              The dragable directions are defined in the EDC file, inside the \@ref dragable
              section, by the attributes $x and $y. See the \@ref edcref for more
              information.]]
            return: Edje.Drag_Dir; [[#EDJE_DRAG_DIR_NONE: Not dragable
                                     #EDJE_DRAG_DIR_X: Dragable in X direction
                                     #EDJE_DRAG_DIR_Y: Dragable in Y direction
                                     #EDJE_DRAG_DIR_XY: Dragable in X & Y directions]]
         }
         keys {
            part: string; [[The part name]]
         }
      }
      @property part_drag_step {
         set {
            [[Sets the drag step increment.

              Sets the x,y step increments for a dragable object.

              Values for dx and dy are real numbers that range from 0 to 1,
              representing the relative size of the dragable area on that axis by which the
              part will be moved.

              See also @.part_drag_step.get()]]
            return: bool; [[$true on success, $false otherwise]]
         }
         get {
            [[Gets the drag step increment values.

              Gets the x and y step increments for the dragable object.

              See also @.part_drag_step.set()]]
            return: bool; [[$true on success, $false otherwise]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            dx: double; [[The x step amount]]
            dy: double; [[The y step amount]]
         }
      }
      part_drag_step {
         [[Steps the dragable x,y steps.

           Steps x,y where the step increment is the amount set by
           @.part_drag_step.set().

           Values for dx and dy are real numbers that range from 0 to 1.

           See also @.part_drag_page()]]

         return: bool; [[$true on success, $false otherwise]]
         params {
            @in part: string; [[The part name]]
            @in dx: double; [[The x step]]
            @in dy: double; [[The y step]]
         }
      }
      @property part_drag_page {
         set {
            [[Sets the page step increments.

              Sets the x,y page step increment values.

              Values for dx and dy are real numbers that range from 0 to 1,
              representing the relative size of the dragable area on that axis by which the
              part will be moved.

              See also @.part_drag_page.get()]]
            return: bool; [[$true on success, $false otherwise]]
         }
         get {
            [[Gets the page step increments.

              Gets the x,y page step increments for the dragable object.

              See also @.part_drag_page.set()]]
            return: bool; [[$true on success, $false otherwise]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            dx: double; [[The x page step increment]]
            dy: double; [[The y page step increment]]
         }
      }
      part_drag_page {
         [[Pages x,y steps.

           Pages x,y where the increment is defined by
           @.part_drag_page.set().

           Values for dx and dy are real numbers that range from 0 to 1.

           Warning: Paging is bugged!

           See also @.part_drag_step()]]

         return: bool; [[$true on success, $false otherwise]]
         params {
            @in part: string; [[The part name]]
            @in dx: double; [[The x step]]
            @in dy: double; [[The y step]]
         }
      }
      @property part_external_param_type {
         get {
            [[Facility to query the type of the given parameter of the given part.]]
            return: Edje.External.Param_Type(Edje.External.Param_Type.max); [[
               @Edje.External.Param_Type.max on errors, or another value
               from @Edje.External.Param_Type on success.
            ]]
         }
         keys {
            part: string; [[The part name]]
            param: string; [[The parameter name to use]]
         }
      }
      @property part_external_object {
         get {
            [[Gets the object created by this external part.

              Parts of type external creates the part object using information
              provided by external plugins. It's somehow like "swallow"
              (edje_object_part_swallow()), but it's all set automatically.

              This function returns the part created by such external plugins and
              being currently managed by this Edje.

              Note: Almost all swallow rules apply: you should not move, resize,
              hide, show, set the color or clipper of such part. It's a bit
              more restrictive as one must  never delete this object!]]
            return: Efl.Canvas.Object; [[The externally created object, or $null if there is none or
                                         part is not an external.]]
         }
         keys {
            part: string; [[The part name]]
         }
      }
      @property part_external_content {
         get {
            [[Gets an object contained in an part of type EXTERNAL

              The content string must not be $null. Its actual value depends on the
              code providing the EXTERNAL.]]
            return: Efl.Canvas.Object; [[Canvas object]] 
         }
         keys {
            part: string; [[The name of the part holding the EXTERNAL]]
            content: string; [[A string identifying which content from the EXTERNAL to get]]
         }
      }
      @property part_external_param {
         set {
            [[Sets the parameter for the external part.

              Parts of type external may carry extra properties that have
              meanings defined by the external plugin. For instance, it may be a
              string that defines a button label and setting this property will
              change that label on the fly.

              Note: external parts have parameters set when they change
              states. Those parameters will never be changed by this
              function. The interpretation of how state_set parameters and
              param_set will interact is up to the external plugin.

              Note: this function will not check if parameter value is valid
              using #Edje_External_Param_Info minimum, maximum, valid
              choices and others. However these should be checked by the
              underlying implementation provided by the external
              plugin. This is done for performance reasons.]]

            return: bool; [[$true if everything went fine, $false on errors.]]
            values {
               param: ptr(const(Edje.External.Param)); [[The parameter details, including its name, type and
                                                     actual value. This pointer should be valid, and the
                                                     parameter must exist in
                                                     #Edje_External_Type.parameters_info, with the exact type,
                                                     otherwise the operation will fail and $false will be
                                                     returned.]]
            }
         }
         get {
            [[Gets the parameter for the external part.

              Parts of type external may carry extra properties that have
              meanings defined by the external plugin. For instance, it may be a
              string that defines a button label. This property can be modified by
              state parameters, by explicit calls to
              edje_object_part_external_param_set() or getting the actual object
              with edje_object_part_external_object_get() and calling native
              functions.

              This function asks the external plugin what is the current value,
              independent on how it was set.]]

            return: bool; [[$true if everything went fine and param members
                            are filled with information, $false on errors and
                            param member values are not set or valid.]]
            values {
               param: Edje.External.Param; [[The parameter details. It is used as both input and
                                             output variable. This pointer should be valid, and the
                                             parameter must exist in
                                             #Edje_External_Type.parameters_info, with the exact type,
                                             otherwise the operation will fail and $false will be
                                             returned.]]
            }
         }
         keys {
            part: string; [[The part name]]
         }
      }
      @property text_change_cb {
         set {
            [[Sets the object text callback.

              This function sets the callback to be called when the text changes.]]
         }
         values {
            func: Edje.Text.Change_Cb; [[The callback function to handle the text change]]
            data: void_ptr; [[The data associated to the callback function.]]
         }
      }
      @property part_text_escaped {
         set {
            [[Sets the text for an object part, but converts HTML escapes to UTF8

              This converts the given string text to UTF8 assuming it contains HTML
              style escapes like "&amp;" and "&copy;" etc. IF the part is of type TEXT,
              as opposed to TEXTBLOCK.

              @since 1.2]]
            return: bool; [[$true on success, $false otherwise]]
         }
         values {
            part: string; [[The part name]]
            text: string; [[The text string]]
         }
      }
      @property part_text_unescaped {
         set {
            [[Sets the raw (non escaped) text for an object part.

              This function will not do escape for you if it is a TEXTBLOCK part, that is,
              if text contain tags, these tags will not be interpreted/parsed by TEXTBLOCK.

              See also @.part_text_unescaped.get().]]
            return: bool; [[$true on success, $false otherwise]]
            values {
               text_to_escape: string; [[The text string]]
            }
         }
         get {
            [[Returns the text of the object part, without escaping.

              This function is the counterpart of
              @.part_text_unescaped.set(). Please notice that the
              result is newly allocated memory and should be released with free()
              when done.

              See also @.part_text_unescaped.set().]]
            values {
               text_to_escape: own(ptr(char)); [[The text string]]
            }
         }
         keys {
            part: string; [[The part name]]
         }
      }
      part_text_append {
         [[Inserts text for an object part.

           This function inserts the text for an object part at the end; It does not
           move the cursor.

           @since 1.1]]

         params {
            @in part: string; [[The part name]]
            @in text: string; [[The text string]]
         }
      }
      part_text_insert {
         [[Inserts text for an object part.

           This function inserts the text for an object part just before the
           cursor position.]]

         params {
            @in part: string; [[The part name]]
            @in text: string; [[The text string]]
         }
      }
      part_text_user_insert @const {
         [[This function inserts text as if the user has inserted it.

           This means it actually registers as a change and emits signals, triggers
           callbacks as appropriate.

           @since 1.2.0]]
         params {
            @in part: string; [[The part name]]
            @in text: string; [[The text string]]
         }
      }
      @property part_text_autocapital_type {
         set {
            [[Sets the autocapitalization type on the immodule.

              @since 1.1.0]]
         }
         get {
            [[Retrieves the autocapitalization type

              @since 1.1.0]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            autocapital_type: Edje.Text.Autocapital_Type; [[The type of autocapitalization]]
         }
      }
      @property part_text_prediction_allow {
         set {
            [[Sets whether the prediction is allowed or not.

              @since 1.2.0]]
         }
         get {
            [[Gets whether the prediction is allowed or not.

              @since 1.2.0]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            prediction: bool; [[If $true, the prediction feature is allowed.]]
         }
      }
      part_text_hide_visible_password {
         [[Hides visible last character for password mode.

           @since 1.18.0]]
         params {
            @in part: string; [[The part name]]
         }
         return: bool; [[$true if the visible character is hidden. $false if there is no visible character or the object is not set for password mode.]]
      }
      @property part_text_cursor_begin {
         set {
            [[Moves the cursor to the beginning of the text part
              \@ref evas_textblock_cursor_paragraph_first]]
         }
         values {
            part: string; [[The part name]]
            cur: Edje.Cursor; [[The edje cursor to work on]]
         }
      }
      @property part_text_cursor_end {
         set {
            [[Moves the cursor to the end of the text part.
              \@ref evas_textblock_cursor_paragraph_last]]
         }
         values {
            part: string; [[The part name]]
            cur: Edje.Cursor; [[The edje cursor to work on]]
         }
      }
      @property part_text_cursor_line_begin {
         set {
            [[Moves the cursor to the beginning of the line.
              \@ref evas_textblock_cursor_line_char_first]]
         }
         values {
            part: string; [[The part name]]
            cur: Edje.Cursor; [[The edje cursor to work on]]
         }
      }
      @property part_text_cursor_line_end {
         set {
            [[Moves the cursor to the end of the line.
              \@ref evas_textblock_cursor_line_char_last]]
         }
         values {
            part: string; [[The part name]]
            cur: Edje.Cursor; [[The edje cursor to work on]]
         }
      }
      part_text_cursor_prev {
         [[Moves the cursor to the previous char
           \@ref evas_textblock_cursor_char_prev]]

         return: bool; [[$true on success, $false otherwise]]
         params {
            @in part: string; [[The part name]]
            @in cur: Edje.Cursor; [[The edje cursor to work on]]
         }
      }
      part_text_cursor_next {
         [[Advances the cursor to the next cursor position.
           \@ref evas_textblock_cursor_char_next]]

         return: bool; [[$true on success, $false otherwise]]
         params {
            @in part: string; [[The part name]]
            @in cur: Edje.Cursor; [[The edje cursor to advance]]
         }
      }
      part_text_cursor_up {
         [[Moves the cursor to the char above the current cursor position.]]

         return: bool; [[$true on success, $false otherwise]]
         params {
            @in part: string; [[The part name]]
            @in cur: Edje.Cursor; [[The edje cursor to work on]]
         }
      }
      part_text_cursor_down {
         [[Moves the cursor to the char below the current cursor position.]]

         return: bool; [[$true on success, $false otherwise]]
         params {
            @in part: string; [[The part name]]
            @in cur: Edje.Cursor; [[The edje cursor to work on]]
         }
      }
      @property part_text_cursor_geometry {
         get {
            [[Returns the cursor geometry of the part relative to the edje
              object.]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            x: Evas.Coord; [[Cursor X position]]
            y: Evas.Coord; [[Cursor Y position]]
            w: Evas.Coord; [[Cursor width]]
            h: Evas.Coord; [[Cursor height]]
         }
      }
      @property part_text_cursor_coord {
         set {
            [[Position the given cursor to a X,Y position.

              This is frequently used with the user cursor.]]

            return: bool; [[$true on success, $false otherwise]]
         }
         values {
            part: string; [[The part containing the object.]]
            cur: Edje.Cursor; [[The cursor to adjust.]]
            x: Evas.Coord; [[X Coordinate.]]
            y: Evas.Coord; [[Y Coordinate.]]
         }
      }
      @property part_text_cursor_pos {
         set {
            [[Sets the cursor position to the given value

              @since 1.1.0]]
         }
         get {
            [[Retrieves the current position of the cursor

              @since 1.1.0]]
         }
         keys {
            part: string; [[The part name]]
            cur: Edje.Cursor; [[The cursor to move]]
         }
         values {
            pos: int; [[The position of the cursor]]
         }
      }
      part_text_cursor_copy {
         [[Copies the cursor to another cursor.]]

         params {
            @in part: string; [[The part name]]
            @in src: Edje.Cursor; [[The cursor to copy from]]
            @in dst: Edje.Cursor; [[The cursor to copy to]]
         }
      }
      @property part_text_cursor_content {
         get {
            [[Returns the content (char) at the cursor position.
              \@ref evas_textblock_cursor_content_get

              You must free the return (if not $null) after you are done with it.]]
            return: own(ptr(char)); [[The character string pointed to (may be a multi-byte utf8 sequence) terminated by a null byte.]]
         }
         keys {
            part: string; [[The part name]]
            cur: Edje.Cursor; [[The cursor to use]]
         }
      }
      @property part_text_cursor_is_format {
         get {
            [[Returns whether the cursor points to a format.
              \@ref evas_textblock_cursor_is_format]]
            return: bool; [[$true if the cursor points to a format, $false otherwise.]]
         }
         keys {
            part: string; [[The part name]]
            cur: Edje.Cursor; [[The cursor to adjust.]]
         }
      }
      @property part_text_cursor_is_visible_format {
         get {
            [[Returns $true if the cursor points to a visible format
              For example \\t, \\n, item and etc.
              \@ref evas_textblock_cursor_format_is_visible_get]]
            return: bool; [[$true if the cursor points to a visible format, $false otherwise.]]
         }
         keys {
            part: string; [[The part name]]
            cur: Edje.Cursor; [[The cursor to adjust.]]
         }
      }
      @property item_provider {
         set {
            [[Sets the function that provides item objects for named items in an edje entry text

              Item objects may be deleted any time by Edje, and will be deleted when the
              Edje object is deleted (or file is set to a new file).]]
         }
         values {
            func: Edje.Item_Provider_Cb; [[The function to call (or $null to disable) to get item objects]]
            data: void_ptr; [[The data pointer to pass to the func callback]]
         }
      }
      @property part_text_select_allow {
         set {
            [[Enables selection if the entry is an EXPLICIT selection mode
              type.

              The default is to  not allow selection. This function only affects user
              selection, functions such as edje_object_part_text_select_all() and
              edje_object_part_text_select_none() are not affected.]]
            legacy: null;
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            allow: bool; [[$true to enable, $false otherwise]]
         }
      }
      part_text_select_begin @const {
         [[Starts selecting at current cursor position]]
         params {
            @in part: string; [[The part name]]
         }
      }
      part_text_select_abort @const {
         [[Aborts any selection action on a part.]]
         params {
            @in part: string; [[The part name]]
         }
      }
      part_text_select_extend @const {
         [[Extends the current selection to the current cursor position]]
         params {
            @in part: string; [[The part name]]
         }
      }
      part_text_select_all @const {
         [[Sets the selection to be everything.

           This function selects all text of the object of the part.]]
         params {
            @in part: string; [[The part name]]
         }
      }
      part_text_select_none @const {
         [[Sets the selection to be none.

           This function sets the selection text to be none.]]
         params {
            @in part: string; [[The part name]]
         }
      }
      @property part_text_selection {
         get {
            [[Returns the selection text of the object part.

              This function returns selection text of the object part.

              See also @.part_text_select_all() and @.part_text_select_none()]]
            return: string; [[The text string]]
         }
         keys {
            part: string; [[The part name]]
         }
      }
      @property part_text_imf_context {
         get {
            [[Gets the input method context in entry.

              If ecore_imf was not available when edje was compiled, this function returns $null
              otherwise, the returned pointer is an Ecore_IMF

              @since 1.2.0]]
            return: void_ptr; [[The input method context (Ecore_IMF_Context *) in entry]]
         }
         keys {
            part: string; [[The part name]]
         }
      }
      part_text_imf_context_reset @const {
         [[Resets the input method context if needed.

           This can be necessary in the case where modifying the buffer would confuse on-going input method behavior

           @since 1.2.0]]
         params {
            @in part: string; [[The part name]]
         }
      }
      part_text_style_user_peek @const {
         [[Returns the text of the object part.

           This function returns the style associated with the textblock part.

           @since 1.2.0]]
         return: string; [[The text string]]
         params {
            @in part: string; [[The part name]]
         }
      }
      part_text_style_user_push {
         [[Sets the style of the

           This function sets the style associated with the textblock part.

           @since 1.2.0]]

         params {
            @in part: string; [[The part name]]
            @in style: string; [[The style to set (textblock conventions).]]
         }
      }
      part_text_style_user_pop {
         [[Deletes the top style form the user style stack.

           @since 1.2.0]]

         params {
            @in part: string; [[The part name]]
         }
      }
      @property part_text_input_hint {
         set {
            [[Sets the input hint which allows input methods to fine-tune their behavior.

              @since 1.12.0]]
         }
         get {
            [[Gets the value of input hint

              @since 1.12.0]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            input_hints: Edje.Input_Hints; [[Input hints]]
         }
      }
      part_text_input_panel_show @const {
         [[Shows the input panel (virtual keyboard) based on the input panel property such as layout, autocapital types, and so on.

           Note that input panel is shown or hidden automatically according to the focus state.
           This API can be used in the case of manually controlling by using edje_object_part_text_input_panel_enabled_set.

           @since 1.2.0]]
         params {
            @in part: string; [[The part name]]
         }
      }
      part_text_input_panel_hide @const {
         [[Hides the input panel (virtual keyboard).
           See also @.part_text_input_panel_show

           Note that input panel is shown or hidden automatically according to the focus state.
           This API can be used in the case of manually controlling by using edje_object_part_text_input_panel_enabled_set.

           @since 1.2.0]]
         params {
            @in part: string; [[The part name]]
         }
      }
      @property part_text_input_panel_imdata {
         set {
            [[Sets the input panel-specific data to deliver to the input panel.

              This API is used by applications to deliver specific data to the input panel.
              The data format MUST be negotiated by both application and the input panel.
              The size and format of data are defined by the input panel.

              @since 1.2.0]]
            keys {
               part: string; [[The part name]]
               data: const(void_ptr); [[The specific data to be set to the input panel.]]
            }
         }
         get {
            [[Gets the specific data of the current active input panel.

              @since 1.2.0]]
            return: void; [[FIXME: void needed here?]]
            keys {
               part: string; [[The part name]]
               data: void_ptr; [[The specific data to be set to the input panel.]]
            }
         }
         values {
            len: int; [[The length of data, in bytes, to send to the input panel]]
         }
      }
      @property part_text_input_panel_layout {
         set {
            [[Sets the layout of the input panel.

              The layout of the input panel or virtual keyboard can make it easier or
              harder to enter content. This allows you to hint what kind of input you
              are expecting to enter and thus have the input panel automatically
              come up with the right mode.

              @since 1.1]]
         }
         get {
            [[Gets the layout of the input panel.

              See also @.part_text_input_panel_layout.set

              @since 1.1]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            layout: Edje.Input_Panel.Layout; [[Layout type of the input panel]]
         }
      }
      @property part_text_input_panel_language {
         set {
            [[Sets the language mode of the input panel.

              This API can be used if you want to show the Alphabet keyboard.

              @since 1.2.0]]
         }
         get {
            [[Gets the language mode of the input panel.

              See also @.part_text_input_panel_language.set for more details.

              @since 1.2.0]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            lang: Edje.Input_Panel.Lang; [[The language to be set to the input panel.]]
         }
      }
      @property part_text_input_panel_layout_variation {
         set {
            [[Sets the layout variation of the input panel.

              The layout variation of the input panel or virtual keyboard can make it easier or
              harder to enter content. This allows you to hint what kind of input you
              are expecting to enter and thus have the input panel automatically
              come up with the right mode.

              @since 1.8]]
         }
         get {
            [[Gets the layout variation of the input panel.

              See also @.part_text_input_panel_layout_variation.set

              @since 1.8]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            variation: int; [[Layout variation type]]
         }
      }
      @property part_text_input_panel_enabled {
         set {
            [[Sets the attribute to show the input panel automatically.

              @since 1.1.0]]
         }
         get {
            [[Retrieves the attribute to show the input panel automatically.
              See also @.part_text_input_panel_enabled.set

              @since 1.1.0]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            enabled: bool; [[If $true, the input panel is appeared when entry is clicked or has a focus]]
         }
      }
      @property part_text_input_panel_return_key_disabled {
         set {
            [[Sets the return key on the input panel to be disabled.

              @since 1.2.0]]
         }
         get {
            [[Gets whether the return key on the input panel should be disabled or not.

              @since 1.2.0]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            disabled: bool; [[The state]]
         }
      }
      @property part_text_input_panel_return_key_type {
         set {
            [[Sets the "return" key type. This type is used to set string or icon on the "return" key of the input panel.

              An input panel displays the string or icon associated with this type

              @since 1.2.0]]
         }
         get {
            [[Gets the "return" key type.

              See also @.part_text_input_panel_return_key_type.set() for more details

              @since 1.2.0]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            return_key_type: Edje.Input_Panel.Return_Key_Type; [[The type of "return" key on the input panel]]
         }
      }
      @property part_text_input_panel_show_on_demand {
         set {
            [[Sets the attribute to show the input panel in case of only an user's explicit Mouse Up event.
              It doesn't request to show the input panel even though it has focus.

              @since 1.9.0]]
         }
         get {
            [[Gets the attribute to show the input panel in case of only an user's explicit Mouse Up event.

              @since 1.9.0]]
         }
         keys {
            part: string; [[The part name]]
         }
         values {
            ondemand: bool; [[If $true, the input panel will be shown in case of only Mouse up event. (Focus event will be ignored.)]]
         }
      }
      @property part_text_anchor_geometry {
         get {
            [[Returns a list of Evas_Textblock_Rectangle anchor rectangles.

              This function return a list of Evas_Textblock_Rectangle anchor
              rectangles.]]
            return: const(list<ptr(const(Evas.Textblock_Rectangle))>); [[The list of anchor rects (const Evas_Textblock_Rectangle
                                                                     *), do not modify! Geometry is relative to entry part.]]
         }
         keys {
            part: string; [[The part name]]
            anchor: string; [[The anchor name]]
         }
      }
      @property part_text_anchor_list {
         get {
            [[Returns a list of char anchor names.

              This function returns a list of char anchor names.]]
            return: const(list<string>); [[The list of anchors (const char *), do not modify!]]
         }
         keys {
            part: string; [[The part name]]
         }
      }
      text_insert_filter_callback_add {
         [[Adds a filter function for newly inserted text.

           Whenever text is inserted (not the same as set) into the given part,
           the list of filter functions will be called to decide if and how the new
           text will be accepted.
           There are three types of filters, EDJE_TEXT_FILTER_TEXT,
           EDJE_TEXT_FILTER_FORMAT and EDJE_TEXT_FILTER_MARKUP.
           The text parameter in the func filter can be modified by the user and
           it's up to him to free the one passed if he's to change the pointer. If
           doing so, the newly set text should be malloc'ed, as once all the filters
           are called Edje will free it.
           If the text is to be rejected, freeing it and setting the pointer to $null
           will make Edje break out of the filter cycle and reject the inserted
           text.

           Warning: This function will be deprecated because of difficulty in use.
           The type(format, text, or markup) of text should be always
           checked in the filter function for correct filtering.
           Please use edje_object_text_markup_filter_callback_add() instead. There
           is no need to check the type of text in the filter function
           because the text is always markup.
           Warning: If you use this function with
           edje_object_text_markup_filter_callback_add() together, all
           Edje_Text_Filter_Cb functions and Edje_Markup_Filter_Cb functions
           will be executed, and then filtered text will be inserted.

           See also @.text_insert_filter_callback_del, @.text_insert_filter_callback_del_full
           and @.text_markup_filter_callback_add]]

         params {
            @in part: string; [[The part name]]
            @in func: Edje.Text.Filter_Cb; [[The callback function that will act as filter]]
            @in data: void_ptr; [[User provided data to pass to the filter function]]
         }
      }
      text_insert_filter_callback_del {
         [[Deletes a function from the filter list.

           Delete the given func filter from the list in part. Returns
           the user data pointer given when added.

           See also @.text_insert_filter_callback_add and @.text_insert_filter_callback_del_full]]

         return: void_ptr; [[The user data pointer if successful, or $null otherwise]]
         params {
            @in part: string; [[The part name]]
            @in func: Edje.Text.Filter_Cb; [[The function callback to remove]]
         }
      }
      text_insert_filter_callback_del_full {
         [[Deletes a function and matching user data from the filter list.

           Delete the given func filter and data user data from the list
           in part.
           Returns the user data pointer given when added.

           See also @.text_insert_filter_callback_add and @.text_insert_filter_callback_del]]

         return: void_ptr; [[The same data pointer if successful, or $null otherwise]]
         params {
            @in part: string; [[The part name]]
            @in func: Edje.Text.Filter_Cb; [[The function callback to remove]]
            @in data: void_ptr; [[The data passed to the callback function]]
         }
      }
      text_markup_filter_callback_add {
         [[Adds a markup filter function for newly inserted text.

           Whenever text is inserted (not the same as set) into the given part,
           the list of markup filter functions will be called to decide if and how
           the new text will be accepted.
           The text parameter in the func filter is always markup. It can be
           modified by the user and it's up to him to free the one passed if he's to
           change the pointer. If doing so, the newly set text should be malloc'ed,
           as once all the filters are called Edje will free it.
           If the text is to be rejected, freeing it and setting the pointer to $null
           will make Edje break out of the filter cycle and reject the inserted
           text.
           This function is different from edje_object_text_insert_filter_callback_add()
           in that the text parameter in the fucn filter is always markup.

           Warning: If you use this function with
           edje_object_text_insert_filter_callback_add() togehter, all
           Edje_Text_Filter_Cb functions and Edje_Markup_Filter_Cb functions
           will be executed, and then filtered text will be inserted.

           See also @.text_markup_filter_callback_del, @.text_markup_filter_callback_del_full
           and @.text_insert_filter_callback_add

           @since 1.2.0]]

         params {
            @in part: string; [[The part name]]
            @in func: Edje.Markup_Filter_Cb; [[The callback function that will act as markup filter]]
            @in data: void_ptr; [[User provided data to pass to the filter function]]
         }
      }
      text_markup_filter_callback_del {
         [[Deletes a function from the markup filter list.

           Delete the given func filter from the list in part. Returns
           the user data pointer given when added.

           See also @.text_markup_filter_callback_add and @.text_markup_filter_callback_del_full

           @since 1.2.0]]

         return: void_ptr; [[The user data pointer if successful, or $null otherwise]]
         params {
            @in part: string; [[The part name]]
            @in func: Edje.Markup_Filter_Cb; [[The function callback to remove]]
         }
      }
      text_markup_filter_callback_del_full {
         [[Deletes a function and matching user data from the markup filter list.

           Delete the given func filter and data user data from the list
           in part.
           Returns the user data pointer given when added.

           See also @.text_markup_filter_callback_add and @.text_markup_filter_callback_del

           @since 1.2.0]]

         return: void_ptr; [[The same data pointer if successful, or $null otherwise]]
         params {
            @in part: string; [[The part name]]
            @in func: Edje.Markup_Filter_Cb; [[The function callback to remove]]
            @in data: void_ptr; [[The data passed to the callback function]]
         }
      }
      @property part_text_item_geometry {
         get {
            [[Returns item geometry.

              This function return a list of Evas_Textblock_Rectangle item
              rectangles.]]
            return: bool; [[$1 if item exists, $0 if not]]
         }
         keys {
            part: string; [[The part name]]
            item: string; [[The item name]]
         }
         values {
            cx: Evas.Coord; [[Item x return (relative to entry part)]]
            cy: Evas.Coord; [[Item y return (relative to entry part)]]
            cw: Evas.Coord; [[Item width return]]
            ch: Evas.Coord; [[Item height return]]
         }
      }
      @property part_text_item_list {
         get {
            [[Returns a list of char item names.

              This function returns a list of char item names.]]
            return: const(list<string>); [[The list of items (const char *), do not modify!]]
         }
         keys {
            part: string; [[The part name]]
         }
      }
      @property seat {
         get {
            [[Returns the seat device given its Edje's name.

              Edje references seats by a name that differs from Evas.
              Edje naming follows a incrementional convention: first
              registered name is "seat1", second is "seat2", differently
              from Evas.

              @since 1.19]]

            return: Efl.Input.Device; [[The seat device or $null if not found.]]
         }
         keys {
            name: stringshare; [[The name's character string.]]
         }
      }
      @property seat_name {
         get {
            [[Gets the name given to a set by Edje.

              Edje references seats by a name that differs from Evas.
              Edje naming follows a incrementional convention: first
              registered name is "seat1", second is "seat2", differently
              from Evas.

              @since 1.19]]

            return: stringshare; [[The name's character string or $null if not found.]]
         }
         keys {
            device: Efl.Input.Device; [[The seat device]]
         }
      }
   }
   implements {
      Efl.Gfx.visible { set; }
      Efl.Gfx.position { set; }
      Efl.Gfx.size { set; }
      Efl.Object.constructor;
      Efl.Object.destructor;
      Efl.Canvas.Object.no_render { set; }
      Efl.Canvas.Object.paragraph_direction { set; }
      Efl.Canvas.Group.group_add;
      Efl.Canvas.Group.group_del;
      Efl.Canvas.Group.group_calculate;
      Efl.File.file { get; set; }
      Efl.File.mmap { get; set; }
      Efl.Container.content_remove;
      Efl.Container.content_part_name { get; }
      Efl.Part.part;
      Efl.Observer.update;
   }
   events {
      recalc; [[Edje re-calculated the object.]]
   }
}
